/* Copyright (C) 2004 - 2007  db4objects Inc.  http://www.db4o.com */

using System;
using Db4oUnit;
using Db4oUnit.Extensions;
using Db4oUnit.Extensions.Fixtures;
using Db4objects.Db4o.Config;
using Db4objects.Db4o.Internal;
using Db4objects.Db4o.Internal.Slots;
using Db4objects.Db4o.Tests.Common.Freespace;

namespace Db4objects.Db4o.Tests.Common.Freespace
{
	public class FreespaceManagerReopenTestCase : AbstractDb4oTestCase, IOptOutCS, IOptOutDefragSolo
	{
		private static int SIZE = 199331;

		public static void Main(string[] args)
		{
			new FreespaceManagerReopenTestCase().RunSolo();
		}

		/// <exception cref="Exception"></exception>
		protected override void Configure(IConfiguration config)
		{
			base.Configure(config);
			config.BTreeNodeSize(4);
			config.FlushFileBuffers(false);
		}

		/// <exception cref="Exception"></exception>
		public virtual void Test()
		{
			Slot testSlot = Container().GetSlot(SIZE);
			Slot reserveSlot = Container().GetSlot(SIZE / 2);
			Reopen();
			Container().Free(testSlot);
			Container().Free(reserveSlot);
			Reopen();
			Slot slot1 = Container().GetSlot(SIZE);
			Assert.IsTrue(Overlap(testSlot, slot1));
			Reopen();
			Slot slot2 = Container().GetSlot(SIZE);
			Assert.IsFalse(Overlap(testSlot, slot2));
		}

		private bool Overlap(Slot slot, Slot other)
		{
			Slot first = slot.Address() < other.Address() ? slot : other;
			Slot second = slot.Address() > other.Address() ? slot : other;
			return first.Address() + first.Length() >= second.Address();
		}

		private LocalObjectContainer Container()
		{
			return ((LocalObjectContainer)Db());
		}
	}
}
