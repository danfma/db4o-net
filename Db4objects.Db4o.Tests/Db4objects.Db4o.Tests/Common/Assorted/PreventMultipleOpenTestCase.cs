namespace Db4objects.Db4o.Tests.Common.Assorted
{
	public class PreventMultipleOpenTestCase : Db4oUnit.Extensions.AbstractDb4oTestCase
	{
		private static readonly string FILE = "PreventMultipleOpenTestCase.db4o";

		public static void Main(string[] args)
		{
			new Db4objects.Db4o.Tests.Common.Assorted.PreventMultipleOpenTestCase().RunSolo();
		}

		protected override void Db4oSetupBeforeStore()
		{
			DeleteFile();
		}

		protected override void Db4oCustomTearDown()
		{
			DeleteFile();
		}

		public virtual void TestOpenTwice()
		{
			Db4objects.Db4o.IObjectContainer oc = OpenFile();
			Db4oUnit.Assert.Expect(typeof(Db4objects.Db4o.Ext.DatabaseFileLockedException), new 
				_AnonymousInnerClass32(this));
			oc.Close();
		}

		private sealed class _AnonymousInnerClass32 : Db4oUnit.ICodeBlock
		{
			public _AnonymousInnerClass32(PreventMultipleOpenTestCase _enclosing)
			{
				this._enclosing = _enclosing;
			}

			public void Run()
			{
				this._enclosing.OpenFile();
			}

			private readonly PreventMultipleOpenTestCase _enclosing;
		}

		public virtual void TestReopen()
		{
			Db4objects.Db4o.IObjectContainer oc = OpenFile();
			oc.Close();
			oc = OpenFile();
			Db4oUnit.Assert.IsNotNull(oc);
			oc.Close();
		}

		private Db4objects.Db4o.IObjectContainer OpenFile()
		{
			return Db4objects.Db4o.Db4oFactory.OpenFile(FILE);
		}

		private void DeleteFile()
		{
			Db4objects.Db4o.Foundation.IO.File4.Delete(FILE);
		}
	}
}
